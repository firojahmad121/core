{% extends "@UVDeskCore//Templates//layout.html.twig" %}

{% block title %}Mailbox{% endblock %}

{% block pageContent %}
	<div class="uv-inner-section">
		{# Agent Panel Sidebar #}
        {{ include('@UVDeskCore/Templates/panel-sidebar.html.twig') }}
		
		<div class="uv-view {% if app.request.cookies and app.request.cookies.get('uv-asideView') %}uv-aside-view{% endif %}">
		
			<div class="mailbox-list-view">
				<div class="uv-action-bar">
					<div class="uv-action-bar-col-lt">
						<h1>Mailbox(es)</h1>
					</div>
					<div class="uv-action-bar-col-rt">
						<div class="uv-app-list-action-rt">
							<a class="uv-btn-action add-mailbox uv-open-popup" data-target="add-mailbox-form">{{ 'New Mailbox'|trans }}</a></div>
					</div>
				</div>				
			
				<div class="uv-app-screen">
					<div id="mailbox-list" class="uv-app-list-channels">
					</div>
				</div>
			</div>
			

			<div class="mailbox-form">
				<form></form>
			</div>
			<div id="mailbox-added"></div>
		</div>
		<div id="add-mailbox-form" class="uv-pop-up-overlay" style="display: none;">
			<form id="uv-add-mailbox-form">			
				<!-- .fade-out-white -->
				<div class="uv-pop-up-box uv-pop-up-slim uv-no-error-success-icon">
					<!-- .jelly-out -->
					<span class="uv-pop-up-close"></span>
					<h2>{{ 'New Mailbox'|trans }}</h2>
					<p>{{ 'You can setup your each support/query email address as a mailbox to receive all mails directly into helpdesk as tickets'|trans }}</p>
					<div class="uv-element-block">
						<label class="uv-field-label">{{ 'Mailbox Name'|trans }}</label>
						<div class="uv-field-block">
							<input class="uv-field" type="text" name="name">
						</div>
					</div>
					<div class="uv-element-block">
						<label class="uv-field-label">{{ 'Mailbox Address'|trans }}</label>
						<div class="uv-field-block">
							<input class="uv-field" type="text" name="email">
						</div>
						<span class="uv-field-info">{{ 'All mails forwarded from this email address will be created as tickets'|trans }}</span>
					</div>
					<div class="uv-pop-up-actions">
						<button type="submit" class="uv-btn save-mailbox">{{ 'Proceed'|trans }}</button>
					</div>
				</div>
			</form>
		</div>
		<div id="confirm-existing-user" class="uv-pop-up-overlay" style="display: none">
			<div class="uv-pop-up-box uv-pop-up-slim uv-no-error-success-icon">	
				<span class="uv-pop-up-close"></span>
				<h2>{{ 'Add Mailbox Confirmation'|trans }}</h2>
				<div class="uv-element-block">				
					<p class="uv-field-info">
						{{ "You are trying to use %existing-email% as Mailbox email. There is also a user with email %existing-email%. If you want to add this email as mailbox, then user with email: %existing-email% cannot create ticket via mail." | trans({"%existing-email%": "<b><i class='existing-user-email-span'>" ~ "ipdeer@ipdeer.com"|trans ~ "</i></b>"}) | raw }}
						{#<a href="" target="_blank">{{ 'Read more'|trans }}</a>#}
					</p>
				</div>
				<div class="uv-element-block">
					<div class="uv-action-buttons">
						<div class="uv-btn" id="confirm-existing-user-btn">{{ 'Proceed'|trans }}</div>
						<div class="uv-btn" id="cancel-existing-user-btn">{{ 'change email'|trans }}</div>
					</div>
				</div>
			</div>
		</div>
		</div>
	</div>

{% endblock %}

{% block footer %}
	{{ parent() }}
	<script id="mailbox_list_item_tmp" type="text/template">
		<div class="uv-app-list-brick-lt" title="<%= email %>">
			<span class="uv-channel-count">
				# <%= parseInt(document.getElementsByClassName('uv-app-list-brick').length)+1 %>
			</span>
		</div>
		<div class="uv-app-list-brick-rt">
			<a href="{{ path('helpdesk_member_ticket_collection') }}#mailbox/<%= id %>" class="semibold">
				<p>					
					<%- name %>
				</p>
			</a>
			<p>
				<% if(isEnabled) { %>
					<span class="uv-app-list-flag-active">{{'verified'|trans }}</span>
				<% } else { %>
					<span class="uv-app-list-flag-inactive">{{ 'unverified'|trans }}</span>
				<% } %>
			</p>
			<div class="uv-app-list-actions">
				<a href class="edit-mailbox <% if(isLocalized) { %> disabled <% } else { %>  <% } %>" >{{ 'Edit'|trans }}</a>
				<a href class="uv-delete delete-mailbox">{{ 'Delete'|trans }}</a>
			</div>
		</div>
	</script>

	<script id="mailbox_form_tmp" type="text/template">
		<h1>
			<% if ('undefined' === typeof(id)) { %>
				{{ 'Add Mailbox'|trans }}
			<% } else { %>
				{{ 'Edit Mailbox'|trans }}
			<% } %>
		</h1>

		<!--Form-->
		<div class="uv-element-block">
			<label class="uv-field-label">Mailbox Name</label>
			<div class="uv-field-block">
				<input name="name" class="uv-field" type="text" value="<% if ('undefined' !== typeof(name)) print(name);  %>">
			</div>
		</div>

		<div class="uv-element-block">
			<label class="uv-field-label">Mailbox Address</label>
			<div class="uv-field-block">
				<input name="email" class="uv-field" type="text" value="<% if ('undefined' !== typeof(email)) print(email); %>">
			</div>

			<% if ('undefined' === typeof(isLocalized) || false == isLocalized) { %>
				<span class="uv-field-info">All mails forwarded from this email address will be processed as tickets.</span>
			<% } else { %>
				<span class="uv-field-info">All mails sent to this email address will be processed as tickets.</span>
			<% } %>
		</div>

		<% if ('undefined' !== typeof(email) && (defaultEmailDomain != email.substr(email.indexOf('@')+1)) && ('undefined' === typeof(isLocalized) || false == isLocalized)) { %>
			<div class="uv-element-block">
					<div class="uv-split-copy uv-padding-right-25">
						<p><%= "{{ 'Forward %email% to'|trans({'%email%': '<span>%replaceEmail%</span>'})|raw }}".replace('%replaceEmail%', email) %></p>						
						<input type="text" class="uv-split-field" readonly="" value="<% if ('undefined' !== typeof(mailboxEmail)) print(mailboxEmail);  %>">
						<button type="button" class="uv-btn uv-split-btn">{{ 'Copy'|trans }}</button>
					</div>
				<span class="uv-field-info">{{ 'You can easily copy the secret email address by clicking the Copy button.'|trans }}</span>
			</div>
		<% } %>

		<input type="button" class="uv-btn save-mailbox" value="Save Changes">

		<% if ('undefined' !== typeof(email) && (defaultEmailDomain != email.substr(email.indexOf('@')+1)) && ('undefined' === typeof(isLocalized) || false == isLocalized)) { %>
			<div class="uv-hr"></div>
			<div class="uv-element-block">
				<p>{{ 'Is the Mailbox address forwarding emails? Send a test mail using the button below to verify if the emails are getting forwarded successfully'|trans }}</p>
				<input type="button" class="uv-btn send-test-email" value="{{ 'Send Test Mail'|trans }}">
				<span class="uv-field-info uv-margin-top-10">{{ 'It may take upto 2-3 mintues to receive a test mail, which will show up as a ticket in Helpdesk if you have successfully forwarded the emails'|trans }}</span>
			</div>
		<% } %>

		<% if ('undefined' !== typeof(email) && (publicEmailDomains.indexOf( email.substr(email.indexOf('@')+1)) === -1) ) { %>
			<div class="uv-hr"></div>
			<div class="uv-element-block">
				<p>{{ 'Want to whitelist your custom email domain for spam free and digitally signed email?'|trans }}</p>
				{# <a href="<%= '{{ path('mailbox_dkim_action', {'id': 'replaceId'}) }}'.replace('replaceId', id) %>" target="_blank">
					<input type="button" class="uv-btn" value="{{ 'Configure DKIM'|trans }}">
				</a> #}
				<span class="uv-field-info uv-margin-top-10">{{ 'DKIM helps you digitally sign email from your helpdesk with your email domain name(s). This helps build you brand identity in all communications with your customers.'|trans }}</span>
			</div>
		<% } %>

		<div class="uv-hr"></div>

		<div class="uv-element-block">
			<h4>{{ 'Need Help?'|trans }}</h4>
			<p>{{ 'Need any help regarding email forwarding for different email clients like Gmail, Outlook or Thunderbird, %Check% at UVdesk Support'|trans({ '%Check%': '<a href="https://support.uvdesk.com/en/blog/how-to-create-mailbox" target="_blank">' ~ 'Check out the complete guide'|trans ~ '</a>' })|raw }}</p>
		</div>
	</script>

	<script id="mailbox_added_tmp" type="text/template">
		<div class="uv-pop-up-overlay">
			<!-- .fade-out-white -->
			<div class="uv-pop-up-box uv-pop-up-slim">
				<!-- .jelly-out -->
				<span class="uv-pop-up-close"></span>
				<h2>Mailbox Created</h2>
				<p><%= "{{ 'Forward %email% to'|trans({'%email%': '<span>%replaceEmail%</span>'})|raw }}".replace('%replaceEmail%', email) %></p>

				<div class="uv-element-block">
					<div class="uv-split-copy">
						<input type="text" class="uv-split-field" readonly value="<% if('undefined' !== typeof(mailboxEmail)) { print(mailboxEmail) } %>">
						<button type="button" class="uv-btn uv-split-btn">{{ 'Copy'|trans }}</button>
					</div>
					<span class="uv-field-info">{{ 'You can easily copy the secret email address by clicking the Copy button.'|trans }}</span>
				</div>

				<div class="uv-element-block uv-element-info">
					<h4>{{ 'Need Help?'|trans }}</h4>
					<p>{{ 'Need any help regarding email forwarding for different email clients like Gmail, Outlook or Thunderbird, %Check% at UVdesk Support'|trans({ '%Check%': '<a href="https://support.uvdesk.com/en/blog/how-to-create-mailbox" target="_blank">' ~ 'Check out the complete guide'|trans ~ '</a>' })|raw }}</p>
				</div>

				<div class="uv-pop-up-actions">
					<a href="#" class="uv-btn cancel">{{ 'Got It'|trans }}</a>
				</div>
			</div>
		</div>
	</script>

	<script type="text/template" id="no-mailbox-template">
        <div class="uv-app-screen">
            <div class="uv-app-splash" style="text-align: center;">
                <img class="uv-app-splash-image" src="{{ asset('../../bundles/uvdeskcore/images/splash/tasks.png') }}" alt="Tasks">
                <h2 class="uv-margin-top-10">{{ 'No mailbox Found.'|trans }}</h2>
                <p><a href="https://support.uvdesk.com/en/blog/how-to-create-mailbox" target="_blank">{{ "Need help?"|trans }}</a></p>
            </div>
        </div>	
	</script>

	<script type="text/javascript">
		publicEmailDomains = ['uvdesk.com', 'webkul.com', 'gmail.com', 'zoho.com' , 'yahoo.in', 'yahoo.com', 'yahoo.co.in' , 'yahoo.co.uk', 'yahoo.ca', 'hotmail.com', 'hotmail.co.uk', 'aol.com', 'msn.com', 'rediffmail.com'];
		defaultEmailDomain = 'helpdeskwebkul' + '.uvdesk.com';
		{# defaultEmailDomain = '{{ websiteDetails.domain }}' + '.uvdesk.com'; #}
		publicEmailDomains.push(defaultEmailDomain);

		_.extend(Backbone.Validation.validators, {
		    validateEmailValidator: function(value, attr, customValue, model) {
				if('undefined' == typeof(value) || value.toLowerCase().indexOf('@uvdesk.com') > -1) {
					return '{{ "You can not add UVdesk Email as a mailbox !!"|trans }}';
				} 
			},
		});

		var MailboxModel = Backbone.Model.extend({
			idAttribute : "id",
		    validation: {
		        'name': {
		            required: true,
		            msg: '{{ "Please enter mailbox name"|trans }}'
		        },
		        'email': [
		        {
			      	required: true,
			      	msg: '{{ "Please enter an email address"|trans }}'
			    },{
			      	pattern: 'email',
			      	msg: '{{ "Please enter a valid email"|trans }}'
			    },{
			      	validateEmailValidator: true,
			    }],
		    },
		    parse: function (resp) {
			    return resp.mailbox;
			},
		    urlRoot : "{{ path('helpdesk_member_mailbox_channel_xhr') }}"
		});

		var MailboxCollection = Backbone.PageableCollection.extend({
			model : MailboxModel
		});

		var FullView = Backbone.View.extend({
			el: $('body'),
			events:  {
				'click #cancel-existing-user-btn': 'cancelExistingUserPrompt',
				'click #confirm-existing-user-btn': 'confirmExistingUserPrompt',
				'click #mailbox-added .uv-pop-up-close,#mailbox-added .cancel': 'showMobAside',
			},
			showMobAside: function(e) {
				$('.uv-mob-aside').show();
			},
			cancelExistingUserPrompt:  function(e) {
				$('#confirm-existing-user').hide();
			},
			confirmExistingUserPrompt:  function(e) {
				
				$('#confirm-existing-user').hide();
				continueForm.find('.save-mailbox').before('<input type="hidden" name="confirmed" value="1">');
				setTimeout(function() {
					console.log($('input[name="confirmed"]'));
					$('input[name="confirmed"]').remove();
				},1000);
				continueForm.find('.save-mailbox').trigger('click');
			}
		});

		var MailboxList = Backbone.View.extend({
			el : $(".mailbox-list-view"),
			listEl: $('#mailbox-list'),
			noResultTemplate: _.template($('#no-mailbox-template').html()),
			initialize : function() {
		        this.render();
		    },
			events: {
				'click .add-mailbox': 'addMailboxForm',
			},
	        render : function () {
	        	this.listEl.html('');
				
	        	if(mailboxCollection.length) {
		            _.each(mailboxCollection.models, function (item) {
		                this.renderMailbox(item);
		            }, this);
		        } else {
					this.listEl.append(this.noResultTemplate())
		        }
	        },
	        renderMailbox : function (item) {
	            var mailboxItem = new MailboxItem({
	                model: item
	            });
	            this.listEl.append(mailboxItem.render().el);
	        },
			addMailboxForm: function(e) {
				addMailboxForm.resetModel();
			},
			StartCopyListener: function() {
				copyBtn = $(".uv-split-copy .uv-split-btn");
				copyBtn.on("click", function() {
					if(copyInput = document.querySelector(".uv-split-copy .uv-split-field")) {
						success = app.appView.copyToClipboard(copyInput);
						if(success) {
							prevHtml = copyBtn.html();
							copyBtn.html('Copied');
							copyBtn.addClass('uv-success');
							setTimeout(function() {
								copyBtn.html(prevHtml);
								copyBtn.removeClass('uv-success');								
							},1000);
						}
					}
				});
			},
			checkMailboxLimit: function(response) {
				if(typeof(response.allowedToAdd) != 'undefined' && response.allowedToAdd) {
					$('#upgrade-plan-message').hide();
					$('.add-mailbox').show();
				} else {
					$('#upgrade-plan-message').show();
					//$('.add-mailbox').hide();					
				}
			}
		});

		var MailboxForm = Backbone.View.extend({
			el: $('.mailbox-form>form'),
			initialize : function() {
		        Backbone.Validation.bind(this);
		    },
		    mailboxFormTemplate : _.template($("#mailbox_form_tmp").html()),
		    events : {
				'click .close-edit': 'showMailboxList',
				'blur input': 'formChanged',
				'click .save-mailbox': 'saveMailbox',
		    	'click .send-test-email' : 'sendTestEmailEvent'
		    },
			render: function() {
				this.$el.html('');
				this.$el.html(this.mailboxFormTemplate(this.model.toJSON()));
			},
		    saveMailbox : function (e) {
				e.preventDefault();
		        Backbone.Validation.bind(this);				
	            var currentElement = Backbone.$(e.currentTarget);
				var data = currentElement.closest('form').serializeObject();
				this.model.set(data);
				self = this;
				if(this.model.isValid(true)) {
					app.appView.showLoader();
					currentElement.attr("disabled","disabled");
					this.model.save({}, {
					    success: function (model, response, options) {
							app.appView.hideLoader();
					    	currentElement.removeAttr("disabled");;
							globalMessageResponse = response;
							app.appView.renderResponseAlert(response);

							mailboxCollection.set(model, {remove: false});
							mailboxForm.showMailboxList();
							mailboxList.render();
							// mailboxList.checkMailboxLimit(response);							
					    },
					    error: function (model, xhr, options) {
							app.appView.hideLoader();
					    	currentElement.removeAttr("disabled");;

							if(url = xhr.getResponseHeader('Location'))
								window.location = url;
							var response = warningResponse;
							if(xhr.responseJSON)
								response = xhr.responseJSON;

							try {
								errors = JSON.parse(response['alertMessage'])
								for (var field in errors) {
									Backbone.Validation.callbacks.invalid(self, field, errors[field], 'input');
								}
							} catch(e) {
								app.appView.renderResponseAlert(response);
								mailboxForm.showMailboxList();							
							}
							mailboxList.checkMailboxLimit(xhr);
							if(response && response.existingUserEmail) {
								if(self.model.get('email')) {
									continueForm = currentElement.closest('form');
									$('.existing-user-email-span').html(self.model.get('email'));
									$('#confirm-existing-user').show();
								}
							}
		                }
					});
				}
	        },
			showMailboxList: function(e) {
				$(".mailbox-list-view").show();
				$('.mailbox-form').hide();
				$('.uv-aside-back span').attr('onclick' ,'history.go(-1);');
			},
			formChanged: function(e) {
				this.model.set(Backbone.$(e.currentTarget).attr('name'), Backbone.$(e.currentTarget).val())
				this.model.isValid([Backbone.$(e.currentTarget).attr('name')])
			},
			setModel(model) {
				this.model = model;
		        Backbone.Validation.bind(this);				
			},
		    sendTestEmailEvent : function(e) {
				e.preventDefault();
	        	this.requestCount = 0;
	        	this.sendTestEmail();
	        },
		    sendTestEmail : function () {
	        	self = this;
	        	$('.send-test-email').attr("disabled","disabled");
	        	self.$el.find('.send-test-email').val('{{ "Sending test mail"|trans }} ...');
				if(!self.$el.find('.send-test-email').next().hasClass('uv-loader')) {
					self.$el.find('.send-test-email').after('<div class="uv-loader sending-mail-loader" style="display: inline-block;margin-left:10px;margin-top:5px;vertical-align:top;"><span></span><span></span><span></span></div>');
				}
								
				var testModel = new MailboxModel({ id: this.model.id });
		        testModel.save({
		        		data : {flag: self.requestCount}
		        	},{
					PATCH: true,
		        	url : "{{ path('helpdesk_member_mailbox_channel_verify_mail_auto_forwarding') }}",
		        	success : function (model, response, options) {
	        			if(!model.attributes.isActive) {
	        				self.requestCount++;
	        				if(self.requestCount < 5) {
	        					setTimeout(function() {
								  	self.sendTestEmail();
								}, 10000);
	        				} else {
	        					response['alertMessage'] = "{{ 'Warning! Cannot verifiy that Auto forwarding is enabled for this email. Make sure forwarding is enabled.'|trans }}";
								app.appView.renderResponseAlert(response);
								self.$el.find('.send-test-email').val('{{ "SEND TEST MAIL"|trans }}');
								$('.sending-mail-loader').remove();
	        					$('.send-test-email').removeAttr("disabled");
	        				}
	        			} else {
	        				response['alertMessage'] = "{% trans %}Success ! Auto forwarding is enabled.{% endtrans %}";
							app.appView.renderResponseAlert(response);
							self.$el.find('.send-test-email').val('{{ "SEND TEST MAIL"|trans }}');
							$('.sending-mail-loader').remove();							
	        				$('.send-test-email').removeAttr("disabled");
	        				mailboxCollection.set(model,{remove: false});
	        				mailboxList.render();
	        			}
				    },
				    error: function (model, xhr, options) {
						self.$el.find('.send-test-email').val('{{ "SEND TEST MAIL"|trans }}');
						$('.sending-mail-loader').remove();						
				    	if(url = xhr.getResponseHeader('Location'))
	                		window.location = url;
	                    var response = warningResponse;
				    	if(xhr.responseJSON)
				    		response = xhr.responseJSON;
				    	
						app.appView.renderResponseAlert(response);
	                }
		        });
	        },
		});

		var AddMailboxForm = Backbone.View.extend({
			el: $('#add-mailbox-form'),
		    mailBoxAddedTemplate : _.template($("#mailbox_added_tmp").html()),
			events: {
				'blur input': 'formChanged',
				'click .save-mailbox': 'saveMailbox',
			},
			initialize:  function() {
		        Backbone.Validation.bind(this);				
			},
			formChanged: function(e) {
		        Backbone.Validation.bind(this);				

				this.model.set(Backbone.$(e.currentTarget).attr('name'), Backbone.$(e.currentTarget).val());
				this.model.isValid([Backbone.$(e.currentTarget).attr('name')])
			},
			saveMailbox: function(e) {
			
				e.preventDefault();
		        Backbone.Validation.bind(this);				
	            var currentElement = Backbone.$(e.currentTarget);
				var data = currentElement.closest('form').serializeObject();

				this.model.set(data);

				self = this;
				if(this.model.isValid(true)) {
					app.appView.showLoader();
					currentElement.attr("disabled","disabled");
					this.model.save({}, {
					    success: function (model, response, options,xhr) {
							mailboxCollection.add(model);
							currentElement.removeAttr("disabled");
							if(response.statusCode!=400){
								$("#mailbox-added").html(self.mailBoxAddedTemplate(self.model.toJSON())); //change
								mailboxList.StartCopyListener();
								$('.uv-mob-aside').hide();
								$('#add-mailbox-form').hide();
								$('#mailbox-added .uv-pop-up-overlay').show();
								mailboxList.render();
								app.appView.hideLoader();
								globalMessageResponse = response;
								app.appView.renderResponseAlert(response);
								mailboxList.checkMailboxLimit(response);
								$('#uv-add-mailbox-form').trigger('reset');
							} else {
								app.appView.hideLoader();								
								try {
									errors = JSON.parse(response['alertMessage'])
									for (var field in errors) {
										Backbone.Validation.callbacks.invalid(self, field, errors[field], 'input');
									}
								} catch(e) {
									if(Object.keys(response.alertMessage).length) {
										response.alertMessage = response.alertMessage[Object.keys(response.alertMessage)[0]];
										app.appView.renderResponseAlert(response);
									}
								}
								if(response && response.existingUserEmail) {
									if(self.model.get('email')) {
										continueForm = currentElement.closest('form');
										$('.existing-user-email-span').html(self.model.get('email'));
										$('#confirm-existing-user').show();
									}
								}
								mailboxList.checkMailboxLimit(response);
							}
					    },
						error: function (model, xhr, options) {
							if (xhr.responseJSON)
								response = xhr.responseJSON;
							
							app.appView.hideLoader();
							app.appView.renderResponseAlert(response);
						}
					});
				}
				// this.model = new MailboxModel();
			},
			resetModel: function() {
				this.model = new MailboxModel();
			},
		});

		var MailboxItem = Backbone.View.extend({
			tagName : "div",
			className:'uv-app-list-brick',
			template : _.template($("#mailbox_list_item_tmp").html()),
			requestCount : 0,
		    events : {
		    	'click .edit-mailbox' : "editMailbox",
		    	'click .delete-mailbox' : "confirmRemove",
		    },
		    render : function() {
			
	            this.$el.html(this.template(this.model.toJSON()));
	            return this;
	        },
		    editMailbox : function(e) {
				e.preventDefault();
				mailboxForm.setModel(this.model);
				mailboxForm.render();
				$(".mailbox-list-view").hide();
				$('.mailbox-form').show();

				mailboxList.StartCopyListener();
				$('.uv-aside-back span').attr('onclick', '');
		    },
			confirmRemove: function(e) {
				e.preventDefault();
				app.appView.openConfirmModal(this);
			},
			removeItem : function (e) {
				app.appView.showLoader();
		    	self = this;
		        this.model.destroy({
		        	url : "{{ path('helpdesk_member_mailbox_channel_xhr') }}/"+this.model.get('id'),
		        	success : function (model, response, options) {
						app.appView.hideLoader();
						mailboxList.render();
						mailboxForm.showMailboxList();
						app.appView.renderResponseAlert(response);
						mailboxList.checkMailboxLimit(response);
				    },
				    error: function (model, xhr, options) {
						app.appView.hideLoader();
				    	if(url = xhr.getResponseHeader('Location'))
	                		window.location = url;
	                    var response = warningResponse;
				    	if(xhr.responseJSON)
				    		response = xhr.responseJSON;
				    	
						app.appView.renderResponseAlert(response);
	                }
		        });
		    },
		});

		var fullView = new FullView();
		var mailboxCollection = new MailboxCollection($.parseJSON('{{ mailboxes|raw }}'));

		var mailboxList = new MailboxList();

		mailboxForm = new MailboxForm({
	        model : new MailboxModel()
	    });

		addMailboxForm = new AddMailboxForm( {
			model : new MailboxModel()
		});

		$('.uv-aside-back').click(function() {
			mailboxForm.showMailboxList();
		});
	</script>
{% endblock %}
